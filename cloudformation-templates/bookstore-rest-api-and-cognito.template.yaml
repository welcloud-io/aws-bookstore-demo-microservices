Parameters:
  ProjectName:
    Type: String
    Default: mybookstore

Conditions:
  IADRegion: !Equals [!Ref "AWS::Region", "us-east-1"]
    
Mappings:
  S3Buckets:
    us-east-1:
      Bucket: aws-bookstore-demo-app-us-east-1
      NeptuneDataBucket: bookstore-neptune
    us-west-2:
      Bucket: aws-bookstore-demo-app-us-west-2
      NeptuneDataBucket: bookstore-neptune-us-west-2
    eu-central-1:
      Bucket: aws-bookstore-demo-app-eu-central-1
      NeptuneDataBucket: bookstore-neptune-eu-central-1
    eu-west-1:
      Bucket: aws-bookstore-demo-app-eu-west-1
      NeptuneDataBucket: bookstore-neptune-eu-west-1

  Constants:
    AppKeys:
      SeedRepository: https://s3.amazonaws.com/aws-bookstore-demo/bookstore-webapp.zip
      
    S3Keys:
      ListOrdersCode: functions/ListOrders.zip
      GetBookCode: functions/GetBook.zip
      ListBooksCode: functions/ListBooks.zip
      UpdateCartCode: functions/UpdateCart.zip
      GetCartItemCode: functions/GetCartItem.zip
      ListItemsInCartCode: functions/ListItemsInCart.zip
      AddToCartCode: functions/AddToCart.zip
      RemoveFromCartCode: functions/RemoveFromCart.zip
      GetBestSellersCode: functions/GetBestSellers.zip
      CheckoutCode: functions/Checkout.zip
      UploadBooksCode: functions/UploadBooks.zip
      GetRecommendationsCode: functions/GetRecommendations.zip
      GetRecommendationsByBookCode: functions/GetRecommendationsByBook.zip
      SearchCode: functions/Search.zip
      UpdateSearchCode: functions/UpdateSearchCluster.zip
      UpdateBestSellersCode: functions/UpdateBestSellers.zip
      NeptuneLoaderCode: functions/NeptuneLoader.zip
      NeptuneIAMCode: functions/NeptuneIAM.zip
      bookstoreNeptuneS3DataPath: /data/
      booksData: data/books.json
      CreateOSRoleCode: functions/CreateOSRole.zip
      UpdateConfigCode: functions/UpdateConfig.zip
      PythonLambdaLayer: functions/PythonLambdaLayer.zip
      DeleteBucketsCode: functions/DeleteBuckets.zip
      SeederFunctionCode: functions/aws-serverless-codecommit-seeder.zip
      
Resources:
# ------------------------------------------------------------------------------
# API GATEWAY
# ------------------------------------------------------------------------------
  AppApi:
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: !Sub '${ProjectName}-Bookstore'
      Description: API used for Bookstore requests
      FailOnWarnings: true

  ApiAuthorizer:
    Type: 'AWS::ApiGateway::Authorizer'
    Properties:
      AuthorizerResultTtlInSeconds: 300
      IdentitySource: method.request.header.Authorization
      Name: CognitoDefaultUserPoolAuthorizer
      ProviderARNs:
        - !GetAtt 
          - UserPool
          - Arn
      RestApiId: !Ref AppApi
      Type: COGNITO_USER_POOLS
        
# ------------------------------------------------------------------------------
# COGNITO
# ------------------------------------------------------------------------------
  UserPool:
    Type: 'AWS::Cognito::UserPool'
    Properties:
      UserPoolName: !Sub '${ProjectName}-user-pool'
      UsernameAttributes:
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
        InviteMessageTemplate:
          EmailMessage: 'Your username is {username} and temporary password is {####}. '
          EmailSubject: Your temporary password
          SMSMessage: 'Your username is {username} and temporary password is {####}.'
        UnusedAccountValidityDays: 7
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: false
          RequireNumbers: false
          RequireSymbols: false
          RequireUppercase: false
      AutoVerifiedAttributes:
        - email
      EmailVerificationMessage: 'Here is your verification code: {####}'
      EmailVerificationSubject: Your verification code
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
          
  UserPoolClient:
    Type: 'AWS::Cognito::UserPoolClient'
    Properties:
      ClientName: !Sub '${ProjectName}-client'
      GenerateSecret: false
      UserPoolId: !Ref UserPool
      
  IdentityPool:
    Type: 'AWS::Cognito::IdentityPool'
    Properties:
      IdentityPoolName: !Sub '${ProjectName}Identity'
      AllowUnauthenticatedIdentities: true
      CognitoIdentityProviders:
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt 
            - UserPool
            - ProviderName
            
  CognitoUnAuthorizedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': unauthenticated
      Policies:
        - PolicyName: CognitoUnauthorizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                Resource: '*'
                
  CognitoAuthorizedRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Federated: cognito-identity.amazonaws.com
            Action:
              - 'sts:AssumeRoleWithWebIdentity'
            Condition:
              StringEquals:
                'cognito-identity.amazonaws.com:aud': !Ref IdentityPool
              'ForAnyValue:StringLike':
                'cognito-identity.amazonaws.com:amr': authenticated
      Policies:
        - PolicyName: CognitoAuthorizedPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'mobileanalytics:PutEvents'
                  - 'cognito-sync:*'
                  - 'cognito-identity:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'execute-api:Invoke'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:execute-api:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':'
                    - !Ref AppApi
                    - /*
                    
  IdentityPoolRoleMapping:
    Type: 'AWS::Cognito::IdentityPoolRoleAttachment'
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt 
          - CognitoAuthorizedRole
          - Arn
        unauthenticated: !GetAtt 
          - CognitoUnAuthorizedRole
          - Arn

# ------------------------------------------------------------------------------
# OUTPUTS
# ------------------------------------------------------------------------------
Outputs:
  AppApiId:
    Value: 
      Ref: AppApi
    Export:
      Name: BOOKSTORE-API
  AppApiRootResourceId:
    Value: 
      !GetAtt AppApi.RootResourceId
    Export:
      Name: BOOKSTORE-API-ROOT-RESOURCE-ID
  UserPool:
    Value: 
      Ref: UserPool
    Export:
      Name: BOOKSTORE-USER-POOL
  UserPoolClient:
    Value: 
      Ref: UserPoolClient
    Export:
      Name: BOOKSTORE-USER-POOL-CLIENT
  IdentityPool:
    Value: 
      Ref: IdentityPool
    Export:
      Name: BOOKSTORE-IDENTITY-POOL