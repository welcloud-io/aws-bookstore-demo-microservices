Parameters:
  ProjectName:
    Type: String
    Default: mybookstore

Conditions:
  IADRegion: !Equals [!Ref "AWS::Region", "us-east-1"]
    
Mappings:
  S3Buckets:
    us-east-1:
      Bucket: aws-bookstore-demo-app-us-east-1
      NeptuneDataBucket: bookstore-neptune
    us-west-2:
      Bucket: aws-bookstore-demo-app-us-west-2
      NeptuneDataBucket: bookstore-neptune-us-west-2
    eu-central-1:
      Bucket: aws-bookstore-demo-app-eu-central-1
      NeptuneDataBucket: bookstore-neptune-eu-central-1
    eu-west-1:
      Bucket: aws-bookstore-demo-app-eu-west-1
      NeptuneDataBucket: bookstore-neptune-eu-west-1

  Constants:
    AppKeys:
      SeedRepository: https://s3.amazonaws.com/aws-bookstore-demo/bookstore-webapp.zip
      
    S3Keys:
      ListOrdersCode: functions/ListOrders.zip
      GetBookCode: functions/GetBook.zip
      ListBooksCode: functions/ListBooks.zip
      UpdateCartCode: functions/UpdateCart.zip
      GetCartItemCode: functions/GetCartItem.zip
      ListItemsInCartCode: functions/ListItemsInCart.zip
      AddToCartCode: functions/AddToCart.zip
      RemoveFromCartCode: functions/RemoveFromCart.zip
      GetBestSellersCode: functions/GetBestSellers.zip
      CheckoutCode: functions/Checkout.zip
      UploadBooksCode: functions/UploadBooks.zip
      GetRecommendationsCode: functions/GetRecommendations.zip
      GetRecommendationsByBookCode: functions/GetRecommendationsByBook.zip
      SearchCode: functions/Search.zip
      UpdateSearchCode: functions/UpdateSearchCluster.zip
      UpdateBestSellersCode: functions/UpdateBestSellers.zip
      NeptuneLoaderCode: functions/NeptuneLoader.zip
      NeptuneIAMCode: functions/NeptuneIAM.zip
      bookstoreNeptuneS3DataPath: /data/
      booksData: data/books.json
      CreateOSRoleCode: functions/CreateOSRole.zip
      UpdateConfigCode: functions/UpdateConfig.zip
      PythonLambdaLayer: functions/PythonLambdaLayer.zip
      DeleteBucketsCode: functions/DeleteBuckets.zip
      SeederFunctionCode: functions/aws-serverless-codecommit-seeder.zip
      
Resources:

# ------------------------------------------------------------------------------
# NEPTUNE S3 BULK LOAD - Attach s3LoaderRole To Neptune Cluster
# ------------------------------------------------------------------------------
  
  PythonLambdaLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      CompatibleRuntimes:
        - python3.9
        - python3.7
        - python3.6
      Content:
        S3Bucket: !FindInMap
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap
          - Constants
          - S3Keys
          - PythonLambdaLayer 
      
  bookstoreNeptuneLoaderS3ReadRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - rds.amazonaws.com
        Version: '2012-10-17'
      Path: /

  bookstoreNeptuneLoaderS3ReadPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: bookstoreNeptuneLoaderS3ReadPolicy
      PolicyDocument:
        Statement:
        - Action:
          - s3:Get*
          - s3:List*
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'
      Roles:
      - Ref: bookstoreNeptuneLoaderS3ReadRole
      
  bookstoreNeptuneIAMAttachLambdaRoleCloudWatchStream:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: !Join [ "", [ "arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":log-group:/aws/lambda/",  !Ref bookstoreNeptuneIAMAttachLambda, ":*" ]]
        Version: '2012-10-17'
      PolicyName: bookstoreNeptuneIAMAttachLambdaRoleCloudWatchStream
      Roles:
      - Ref: bookstoreNeptuneIAMAttachLambdaRole
      
  bookstoreNeptuneIAMAttachLambdaRoleCloudWatchGroup:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogGroup
          Effect: Allow
          Resource: !Join [ "", [ "arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":*" ]]
        Version: '2012-10-17'
      PolicyName: bookstoreNeptuneIAMAttachLambdaRoleCloudWatchGroup
      Roles:
      - Ref: bookstoreNeptuneIAMAttachLambdaRole
      
  bookstoreNeptuneIAMAttachLambdaRoleEC2:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DeleteNetworkInterface
          - ec2:DetachNetworkInterface
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'
      PolicyName: bookstoreNeptuneIAMAttachLambdaRoleEC2
      Roles:
      - Ref: bookstoreNeptuneIAMAttachLambdaRole
      
  bookstoreNeptuneIAMAttachLambdaRoleRDS:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
          - 
            Action:
              - rds:AddRoleToDBCluster
              - rds:DescribeDBClusters
            Effect: Allow
            Resource:
              - "*"
          - 
            Action:
              - iam:PassRole
            Effect: Allow
            Resource:
              - Fn::GetAtt: [ bookstoreNeptuneLoaderS3ReadRole, Arn ]
        Version: '2012-10-17'
      PolicyName: bookstoreNeptuneIAMAttachLambdaRoleRDS
      Roles:
      - Ref: bookstoreNeptuneIAMAttachLambdaRole
      
  bookstoreNeptuneIAMAttachLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /
      
  bookstoreNeptuneIAMAttachLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap 
                    - S3Buckets
                    - !Ref 'AWS::Region'
                    - Bucket
        S3Key: !FindInMap 
                - Constants
                - S3Keys
                - NeptuneIAMCode
      Description: 'Lambda function to add an IAM policy to a Neptune cluster to allow for bulk load.'
      Handler: lambda_function.lambda_handler
      Layers:
        - !Ref PythonLambdaLayer
      MemorySize: 128
      Role:
        Fn::GetAtt: [ bookstoreNeptuneIAMAttachLambdaRole, Arn ]
      Runtime: python3.9
      Timeout: 30
      
  bookstoreNeptuneIAMAttach:
    Type: Custom::NeptuneIAMAttach
    Properties: 
      ServiceToken:
        Fn::GetAtt: [ bookstoreNeptuneIAMAttachLambda, Arn ]
      NeptuneDB:
        Fn::ImportValue: BOOKSTORE-NEPTUNE-CLUSTER
      IAMRole: 
        Fn::GetAtt: [ bookstoreNeptuneLoaderS3ReadRole, Arn ]
      Region: !Ref 'AWS::Region'
    DependsOn: 
      - bookstoreNeptuneIAMAttachLambdaRoleCloudWatchStream
      - bookstoreNeptuneIAMAttachLambdaRoleCloudWatchGroup
      - bookstoreNeptuneIAMAttachLambdaRoleEC2
      - bookstoreNeptuneIAMAttachLambdaRoleRDS
      - bookstoreNeptuneIAMAttachLambdaRole
      - bookstoreNeptuneIAMAttachLambda
      - bookstoreNeptuneLoaderS3ReadPolicy
      - bookstoreNeptuneLoaderS3ReadRole

# ------------------------------------------------------------------------------
# NEPTUNE S3 BULK LOAD - Load data into cluster
# ------------------------------------------------------------------------------

  S3Endpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - 's3:Get*'
              - 's3:PutObject'
              - 's3:List*'
            Resource:
              - '*'
      RouteTableIds:
        - Fn::ImportValue: BOOKSTORE-VPC-ROUTE-TABLE
      ServiceName: !Join [ "" , [ "com.amazonaws.", !Ref "AWS::Region", ".s3"]]
      VpcId:
        Fn::ImportValue: BOOKSTORE-VPC

  bookstoreNeptuneLoaderLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess'
      AssumeRolePolicyDocument:
        Statement:
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      Path: /

  bookstoreNeptuneLoaderLambdaRoleCloudWatchStream:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: !Join [ "", [ "arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":log-group:/aws/lambda/",  !Ref bookstoreNeptuneLoaderLambda, ":*" ]]
        Version: '2012-10-17'
      PolicyName: bookstoreNeptuneLoaderLambdaRoleCloudWatchStream
      Roles:
      - Ref: bookstoreNeptuneLoaderLambdaRole
      
  bookstoreNeptuneLoaderLambdaRoleCloudWatchGroup:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogGroup
          Effect: Allow
          Resource: !Join [ "", [ "arn:aws:logs:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId" , ":*" ]]
        Version: '2012-10-17'
      PolicyName: bookstoreNeptuneLoaderLambdaRoleCloudWatchGroup
      Roles:
      - Ref: bookstoreNeptuneLoaderLambdaRole
      
  bookstoreNeptuneLoaderLambdaRoleEC2:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DeleteNetworkInterface
          - ec2:DetachNetworkInterface          
          Effect: Allow
          Resource: "*"
        Version: '2012-10-17'
      PolicyName: bookstoreNeptuneLoaderLambdaRoleEC2
      Roles:
      - Ref: bookstoreNeptuneLoaderLambdaRole
      
  bookstoreNeptuneLoaderLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !FindInMap 
                    - S3Buckets
                    - !Ref 'AWS::Region'
                    - Bucket
        S3Key: !FindInMap 
                - Constants
                - S3Keys
                - NeptuneLoaderCode
      Description: 'Lambda function to load data into Neptune instance.'
      Environment:
        Variables:
          neptunedb:
            Fn::ImportValue: BOOKSTORE-NEPTUNE-CLUSTER-ENDPOINT
          neptuneloads3path: !Join
                              - ''
                              - - 's3://'
                                - !FindInMap
                                  - S3Buckets
                                  - !Ref 'AWS::Region'
                                  - NeptuneDataBucket
                                - !FindInMap
                                  - Constants
                                  - S3Keys
                                  - bookstoreNeptuneS3DataPath
          region: 
            Ref: "AWS::Region"
          s3loadiamrole: 
            Fn::GetAtt: [ bookstoreNeptuneLoaderS3ReadRole, Arn]
      Handler: lambda_function.lambda_handler
      MemorySize: 128
      Layers:
        - !Ref PythonLambdaLayer
      Role:
        Fn::GetAtt: [ bookstoreNeptuneLoaderLambdaRole, Arn ]
      Runtime: python3.9
      Timeout: 180
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: BOOKSTORE-NEPTUNE-SECURITY-GROUP
        SubnetIds:
          - Fn::ImportValue: BOOKSTORE-SUBNET-1
          - Fn::ImportValue: BOOKSTORE-SUBNET-2
    DependsOn: 
      - S3Endpoint
      - bookstoreNeptuneLoaderLambdaRoleEC2
          
  bookstoreNeptuneLoader: 
    Type: "Custom::NeptuneLoader"
    Properties: 
      ServiceToken:
        Fn::GetAtt: [ bookstoreNeptuneLoaderLambda, Arn]
    DependsOn:
      - bookstoreNeptuneLoaderLambdaRoleCloudWatchStream
      - bookstoreNeptuneLoaderLambdaRoleCloudWatchGroup
      - bookstoreNeptuneLoaderLambdaRoleEC2
      - bookstoreNeptuneLoaderLambdaRole      
      - bookstoreNeptuneLoaderLambda
      - bookstoreNeptuneLoaderS3ReadPolicy
      - bookstoreNeptuneLoaderS3ReadRole
      - S3Endpoint