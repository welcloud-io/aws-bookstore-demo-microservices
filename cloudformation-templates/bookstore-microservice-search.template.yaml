Parameters:
  ProjectName:
    Type: String
    Default: mybookstore

Conditions:
  IADRegion: !Equals [!Ref "AWS::Region", "us-east-1"]
    
Mappings:
  S3Buckets:
    us-east-1:
      Bucket: aws-bookstore-demo-app-us-east-1
      NeptuneDataBucket: bookstore-neptune
    us-west-2:
      Bucket: aws-bookstore-demo-app-us-west-2
      NeptuneDataBucket: bookstore-neptune-us-west-2
    eu-central-1:
      Bucket: aws-bookstore-demo-app-eu-central-1
      NeptuneDataBucket: bookstore-neptune-eu-central-1
    eu-west-1:
      Bucket: aws-bookstore-demo-app-eu-west-1
      NeptuneDataBucket: bookstore-neptune-eu-west-1

  Constants:
    AppKeys:
      SeedRepository: https://s3.amazonaws.com/aws-bookstore-demo/bookstore-webapp.zip
      
    S3Keys:
      ListOrdersCode: functions/ListOrders.zip
      GetBookCode: functions/GetBook.zip
      ListBooksCode: functions/ListBooks.zip
      UpdateCartCode: functions/UpdateCart.zip
      GetCartItemCode: functions/GetCartItem.zip
      ListItemsInCartCode: functions/ListItemsInCart.zip
      AddToCartCode: functions/AddToCart.zip
      RemoveFromCartCode: functions/RemoveFromCart.zip
      GetBestSellersCode: functions/GetBestSellers.zip
      CheckoutCode: functions/Checkout.zip
      UploadBooksCode: functions/UploadBooks.zip
      GetRecommendationsCode: functions/GetRecommendations.zip
      GetRecommendationsByBookCode: functions/GetRecommendationsByBook.zip
      SearchCode: functions/Search.zip
      UpdateSearchCode: functions/UpdateSearchCluster.zip
      UpdateBestSellersCode: functions/UpdateBestSellers.zip
      NeptuneLoaderCode: functions/NeptuneLoader.zip
      NeptuneIAMCode: functions/NeptuneIAM.zip
      bookstoreNeptuneS3DataPath: /data/
      booksData: data/books.json
      CreateOSRoleCode: functions/CreateOSRole.zip
      UpdateConfigCode: functions/UpdateConfig.zip
      PythonLambdaLayer: functions/PythonLambdaLayer.zip
      DeleteBucketsCode: functions/DeleteBuckets.zip
      SeederFunctionCode: functions/aws-serverless-codecommit-seeder.zip
      
Resources:
# ------------------------------------------------------------------------------
# LAMBDA FUNCTIONS for OpenSearch
# ------------------------------------------------------------------------------
  OSSearchRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-OSSearchRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      Policies:
        - PolicyName: !Sub '${ProjectName}-lambda-policy'
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'es:ESHttpPost'
                  - 'es:ESHttpGet'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:es:'
                    - !Ref 'AWS::Region'
                    - ':'
                    - !Ref 'AWS::AccountId'
                    - ':'
                    - domain/
                    - !Ref OpenSearchDomain
                    - /*
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:GetObject'
                Resource: !Join 
                  - ''
                  - - 'arn:aws:s3:::'
                    - !FindInMap 
                      - S3Buckets
                      - !Ref 'AWS::Region'
                      - Bucket
                    - /*
              # - Effect: Allow
              #   Action:
              #     - 'dynamodb:DescribeStream'
              #     - 'dynamodb:GetRecords'
              #     - 'dynamodb:GetShardIterator'
              #     - 'dynamodb:ListStreams'
              #   Resource:
              #     - !GetAtt 
              #       - TBooks
              #       - Arn
              #     - !Join 
              #       - ''
              #       - - !GetAtt 
              #           - TBooks
              #           - Arn
              #         - /stream/*

  FunctionSearchPermissions:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !Ref FunctionSearch
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - Fn::ImportValue: BOOKSTORE-API
          - /*

  PythonLambdaLayer:
    Type: "AWS::Lambda::LayerVersion"
    Properties:
      CompatibleRuntimes:
        - python3.9
        - python3.7
        - python3.6
      Content:
        S3Bucket: !FindInMap
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap
          - Constants
          - S3Keys
          - PythonLambdaLayer
          
  FunctionSearch:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-Search'
      Description: Search for books across book names, authors, and categories
      Handler: index.handler
      MemorySize: 256
      Role: !GetAtt 
        - OSSearchRole
        - Arn
      Runtime: python3.8
      Layers:
        - !Ref PythonLambdaLayer
      Timeout: '60'
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue: BOOKSTORE-DEFAULT-SECURITY-GROUP
        SubnetIds:
          - Fn::ImportValue: BOOKSTORE-SUBNET-1
      Code:
        S3Bucket: !FindInMap 
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap 
          - Constants
          - S3Keys
          - SearchCode
      Environment:
        Variables:
          ESENDPOINT: !GetAtt 
            - OpenSearchDomain
            - DomainEndpoint
          REGION: !Ref 'AWS::Region'
    DependsOn:
      - OSSearchRole
      - OpenSearchDomain
      # - TBooks

# ------------------------------------------------------------------------------
# OPEN SEARCH DOMAIN
# ------------------------------------------------------------------------------
  CreateOSRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-CreateOSRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: CreateRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'iam:CreateServiceLinkedRole'
                Resource: 'arn:aws:iam::*:role/aws-service-role/opensearchservice.amazonaws.com/AWSServiceRoleForAmazonOpenSearchService'

  CreateOSRoleFunction:
    Properties:
      Code:
        S3Bucket: !FindInMap
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap
          - Constants
          - S3Keys
          - CreateOSRoleCode
      Description: Create OpenSearch role
      Handler: index.handler
      Role:
        'Fn::GetAtt':
          - CreateOSRole
          - Arn
      Runtime: nodejs12.x
      Timeout: 300
    Type: 'AWS::Lambda::Function'
    
  ESRoleCreator:
    Type: 'Custom::CustomResource'
    Properties:
      ServiceToken: !GetAtt CreateOSRoleFunction.Arn
      ParameterOne: Parameter to pass into Custom Lambda Function
      DependsOn: CreateOSRoleFunction
      
  OpenSearchDomain:
    Type: 'AWS::OpenSearchService::Domain'
    Properties:
      DomainName: !Sub '${ProjectName}-domain'
      EngineVersion: OpenSearch_1.3
      ClusterConfig:
        DedicatedMasterEnabled: 'false'
        InstanceCount: 1
        ZoneAwarenessEnabled: 'false'
        InstanceType: t3.small.search
      VPCOptions:
        SubnetIds:
          - Fn::ImportValue: BOOKSTORE-SUBNET-1
      EBSOptions:
        EBSEnabled: true
        Iops: 0
        VolumeSize: 100
        VolumeType: gp2
      AccessPolicies:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS: '*'
            Action:
              - 'es:*'
            Resource: !Join 
              - ''
              - - 'arn:aws:es:'
                - !Ref 'AWS::Region'
                - ':'
                - !Ref 'AWS::AccountId'
                - ':'
                - domain/
                - !Sub '${ProjectName}-domain'
                - /*
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: true
    DependsOn:
      - ESRoleCreator

# ------------------------------------------------------------------------------
# API GATEWAY - Search
# ------------------------------------------------------------------------------
  SearchApiResource:
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId:
        Fn::ImportValue: BOOKSTORE-API
      ParentId: 
        Fn::ImportValue: BOOKSTORE-API-ROOT-RESOURCE-ID
      PathPart: search
      
  SearchApiRequestGET:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: AWS_IAM
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - FunctionSearch
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      RequestParameters:
        method.request.querystring.q: false
      ResourceId: !Ref SearchApiResource
      RestApiId:
        Fn::ImportValue: BOOKSTORE-API
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
    DependsOn: FunctionSearchPermissions
            
  SearchApiRequestOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      ResourceId: !Ref SearchApiResource
      RestApiId:
        Fn::ImportValue: BOOKSTORE-API
      AuthorizationType: None
      HttpMethod: OPTIONS
      Integration:
        Type: MOCK
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Methods: '''GET,POST,PUT,DELETE,OPTIONS,HEAD,PATCH'''
              method.response.header.Access-Control-Allow-Origin: '''*'''
            ResponseTemplates:
              application/json: ''
            StatusCode: '200'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - ResponseModels:
            application/json: Empty
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
          StatusCode: '200'

# ------------------------------------------------------------------------------
# API Deployment
# ------------------------------------------------------------------------------
  APIDeployment:
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      Description: Prod deployment for API
      RestApiId:
        Fn::ImportValue: BOOKSTORE-API
      StageName: prod
    DependsOn:
      - SearchApiRequestGET
      - SearchApiRequestOPTIONS

# ------------------------------------------------------------------------------
# OUTPUTS
# ------------------------------------------------------------------------------
Outputs:
  OpenSearchDomainEndpoint:
    Value: 
      !GetAtt OpenSearchDomain.DomainEndpoint
    Export:
      Name: BOOKSTORE-OPENSEARCH-DOMAIN-ENDPOINT