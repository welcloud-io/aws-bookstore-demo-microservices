Parameters:
  ProjectName:
    Type: String
    Default: mybookstore

Conditions:
  IADRegion: !Equals [!Ref "AWS::Region", "us-east-1"]
    
Mappings:
  S3Buckets:
    us-east-1:
      Bucket: aws-bookstore-demo-app-us-east-1
      NeptuneDataBucket: bookstore-neptune
    us-west-2:
      Bucket: aws-bookstore-demo-app-us-west-2
      NeptuneDataBucket: bookstore-neptune-us-west-2
    eu-central-1:
      Bucket: aws-bookstore-demo-app-eu-central-1
      NeptuneDataBucket: bookstore-neptune-eu-central-1
    eu-west-1:
      Bucket: aws-bookstore-demo-app-eu-west-1
      NeptuneDataBucket: bookstore-neptune-eu-west-1

  Constants:
    AppKeys:
      SeedRepository: https://s3.amazonaws.com/aws-bookstore-demo/bookstore-webapp.zip
      
    S3Keys:
      ListOrdersCode: functions/ListOrders.zip
      GetBookCode: functions/GetBook.zip
      ListBooksCode: functions/ListBooks.zip
      UpdateCartCode: functions/UpdateCart.zip
      GetCartItemCode: functions/GetCartItem.zip
      ListItemsInCartCode: functions/ListItemsInCart.zip
      AddToCartCode: functions/AddToCart.zip
      RemoveFromCartCode: functions/RemoveFromCart.zip
      GetBestSellersCode: functions/GetBestSellers.zip
      CheckoutCode: functions/Checkout.zip
      UploadBooksCode: functions/UploadBooks.zip
      GetRecommendationsCode: functions/GetRecommendations.zip
      GetRecommendationsByBookCode: functions/GetRecommendationsByBook.zip
      SearchCode: functions/Search.zip
      UpdateSearchCode: functions/UpdateSearchCluster.zip
      UpdateBestSellersCode: functions/UpdateBestSellers.zip
      NeptuneLoaderCode: functions/NeptuneLoader.zip
      NeptuneIAMCode: functions/NeptuneIAM.zip
      bookstoreNeptuneS3DataPath: /data/
      booksData: data/books.json
      CreateOSRoleCode: functions/CreateOSRole.zip
      UpdateConfigCode: functions/UpdateConfig.zip
      PythonLambdaLayer: functions/PythonLambdaLayer.zip
      DeleteBucketsCode: functions/DeleteBuckets.zip
      SeederFunctionCode: functions/aws-serverless-codecommit-seeder.zip
      
Resources:
# ------------------------------------------------------------------------------
# FRONTEND
# ------------------------------------------------------------------------------
  AssetsCodeRepository:
    Type: 'AWS::CodeCommit::Repository'
    Properties:
      RepositoryDescription: Code repository for web application
      RepositoryName: !Sub '${ProjectName}-WebAssets'
        
  AssetsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private
      MetricsConfigurations:
        - Id: EntireBucket
      WebsiteConfiguration:
        IndexDocument: index.html
        
  AssetsBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref AssetsBucket
      PolicyDocument:
        Statement:
          - Action: 's3:GetObject'
            Effect: Allow
            Resource: !Sub 'arn:aws:s3:::${AssetsBucket}/*'
            Principal:
              AWS: !Sub
                arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity
                ${AssetsBucketOriginAccessIdentity}
    DependsOn:
      - AssetsBucketOriginAccessIdentity
        
  AssetsBucketOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub 'OriginAccessIdentity for ${AssetsBucket}'
        
  AssetsCDN:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: !Sub 'CDN for ${AssetsBucket}'
        DefaultRootObject: index.html
        Origins:
          - DomainName: !Join
              - ''
              - - !Sub '${AssetsBucket}.s3'
                - !If [IADRegion, '', !Sub '-${AWS::Region}']
                - '.amazonaws.com'
            Id: S3
            S3OriginConfig:
              OriginAccessIdentity: !Sub >-
                origin-access-identity/cloudfront/${AssetsBucketOriginAccessIdentity}
        DefaultCacheBehavior:
          TargetOriginId: S3
          ViewerProtocolPolicy: https-only
          ForwardedValues:
            QueryString: 'false'
    DependsOn:
      - AssetsBucketOriginAccessIdentity

  CodeBuildRole:
    Description: Creating service role in IAM for AWS CodeBuild
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-codebuild-role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: codebuild-policy
          PolicyDocument:
            Statement:
              - Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:GetBucketVersioning'
                Resource:
                  - !Join 
                    - ''
                    - - !GetAtt AssetsBucket.Arn
                      - /*
                  - !Join 
                    - ''
                    - - !GetAtt PipelineArtifactsBucket.Arn
                      - /*
                Effect: Allow
        - PolicyName: codebuild-logs
          PolicyDocument:
            Statement:
              - Action:
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'cloudfront:CreateInvalidation'
                Resource: '*'
                Effect: Allow
      Path: /
        
  CodePipelineRole:
    Description: Creating service role in IAM for AWS CodePipeline
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-CodePipeline-Role'
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: codecommit-for-codepipeline
          PolicyDocument:
            Statement:
              - Action:
                  - 'codecommit:GetBranch'
                  - 'codecommit:GetCommit'
                  - 'codecommit:UploadArchive'
                  - 'codecommit:GetUploadArchiveStatus'
                  - 'codecommit:CancelUploadArchive'
                Resource: !GetAtt AssetsCodeRepository.Arn
                Effect: Allow
        - PolicyName: artifacts-for-pipeline
          PolicyDocument:
            Statement:
              - Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                Resource:
                  'Fn::Join':
                    - ''
                    - - 'Fn::GetAtt':
                        - PipelineArtifactsBucket
                        - Arn
                      - /*
                Effect: Allow
        - PolicyName: codebuild-for-pipeline
          PolicyDocument:
            Statement:
              - Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                Resource: !GetAtt 
                  - CodeBuildProject
                  - Arn
                Effect: Allow
      Path: /
      
  PipelineArtifactsBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      AccessControl: Private

  CodeBuildProject:
    Description: Creating AWS CodeBuild project
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Description: !Sub 'Building stage for ${ProjectName}.'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        EnvironmentVariables:
          - Name: S3_BUCKET
            Value: !Ref PipelineArtifactsBucket
        Image: 'aws/codebuild/standard:2.0'
        Type: LINUX_CONTAINER
      Name: !Sub '${ProjectName}-build'
      ServiceRole: !Ref CodeBuildRole
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
          phases:
            install:
              runtime-versions:
                nodejs: 10
            pre_build:
              commands:
                - echo Installing NPM dependencies...
                - npm install
            build:
              commands:
                - npm run build
            post_build:
              commands:
                - echo Uploading to AssetsBucket 
                - aws s3 cp --recursive ./build s3://${AssetsBucket}/ 
                - aws s3 cp --cache-control="max-age=0, no-cache, no-store, must-revalidate" ./build/service-worker.js s3://${AssetsBucket}/
                - aws s3 cp --cache-control="max-age=0, no-cache, no-store, must-revalidate" ./build/index.html s3://${AssetsBucket}/
                - aws cloudfront create-invalidation --distribution-id ${AssetsCDN} --paths /index.html /service-worker.js

          artifacts:
            files:
              - '**/*'
            base-directory: build        
      Tags:
        - Key: app-name
          Value: !Ref ProjectName
      TimeoutInMinutes: 5
    DependsOn:
      - PipelineArtifactsBucket
      
  AssetsCodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Sub '${ProjectName}-Assets-Pipeline'
      RoleArn: !GetAtt 
        - CodePipelineRole
        - Arn
      ArtifactStore:
        Location: !Ref PipelineArtifactsBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              InputArtifacts: []
              ActionTypeId:
                Version: '1'
                Category: Source
                Owner: AWS
                Provider: CodeCommit
              Configuration:
                BranchName: master
                RepositoryName: !Sub '${ProjectName}-WebAssets'
              OutputArtifacts:
                - Name: !Sub '${ProjectName}-SourceArtifact'
        - Name: Build
          Actions:
            - Name: build-and-deploy
              InputArtifacts:
                - Name: !Sub '${ProjectName}-SourceArtifact'
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              OutputArtifacts:
                - Name: !Sub '${ProjectName}-BuildArtifact'
              Configuration:
                ProjectName: !Sub '${ProjectName}-build'
              RunOrder: 1
    DependsOn:
      - PipelineArtifactsBucket
      
  SeederFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !FindInMap
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap
        - Constants
        - S3Keys
        - SeederFunctionCode
      Description: CodeCommit repository seeder
      Handler: seeder.SeedRepositoryHandler
      MemorySize: 3008
      Role:
        'Fn::GetAtt':
          - SeederRole
          - Arn
      Runtime: java8
      Timeout: 900
    DependsOn:
      - AssetsCodeRepository
      
  SeederRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyDocument:
            Statement:
              - Action:
                  - 'codecommit:GetRepository'
                  - 'codecommit:GitPush'
                  - 'codecommit:GetBranch'
                  - 'codecommit:PutFile'
                Effect: Allow
                Resource: !GetAtt AssetsCodeRepository.Arn
            Version: 2012-10-17
          PolicyName: SeederRolePolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - 'logs:*'
                Effect: Allow
                Resource: 'arn:aws:logs:*:*:*'
            Version: 2012-10-17
          PolicyName: LogsPolicy
      
  RepositorySeeder:
    Type: 'Custom::RepositorySeeder'
    Properties:
      ServiceToken:
        'Fn::GetAtt':
          - SeederFunction
          - Arn
      sourceUrl: !FindInMap [Constants, AppKeys, SeedRepository]
      targetRepositoryName: !Sub '${ProjectName}-WebAssets'
      targetRepositoryRegion: '${AWS::Region}'
      
  UpdateConfigFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        S3Bucket: !FindInMap
          - S3Buckets
          - !Ref 'AWS::Region'
          - Bucket
        S3Key: !FindInMap
          - Constants
          - S3Keys
          - UpdateConfigCode
      Description: Update config for CodeCommit repository
      Handler: index.handler
      Role:
        'Fn::GetAtt':
          - SeederRole
          - Arn
      Runtime: nodejs12.x
      Timeout: 300
      Environment:
        Variables:
          API_URL: !Sub 
                    - 'https://${AppApi}.execute-api.${AWS::Region}.amazonaws.com/prod'
                    - AppApi:
                        Fn::ImportValue: BOOKSTORE-API
          BRANCH_NAME: master
          REGION: !Ref 'AWS::Region'
          REPOSITORY_NAME: !Sub '${ProjectName}-WebAssets'
          USER_POOL_ID: 
            Fn::ImportValue: BOOKSTORE-USER-POOL
          APP_CLIENT_ID: 
            Fn::ImportValue: BOOKSTORE-USER-POOL-CLIENT
          IDENTITY_POOL_ID: 
            Fn::ImportValue: BOOKSTORE-IDENTITY-POOL
    DependsOn:
      - AssetsCodeRepository
      - SeederFunction
      - RepositorySeeder

  RepositoryUpdater:
    Type: 'Custom::CustomResource'
    Properties:
      ServiceToken: !GetAtt UpdateConfigFunction.Arn
      ParameterOne: Parameter to pass into Custom Lambda Function
    DependsOn: UpdateConfigFunction

# ------------------------------------------------------------------------------
# OUTPUTS
# ------------------------------------------------------------------------------
Outputs:
  WebApplication:
    Description: The URL for the web application
    Export:
      Name: !Sub '${ProjectName}WebApp'
    Value: !Sub
      - https://${Domain}
      - { Domain: !GetAtt AssetsCDN.DomainName }